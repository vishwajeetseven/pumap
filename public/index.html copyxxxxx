<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PU Map</title>
  <link rel="preload" as="image" href="https://cdn.glitch.global/5bc9edf4-373c-47f7-9a1c-29acc401cd85/7l.webp?v=1742671563081">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      width: 100%;
      height: 100%;
    }
    #map-container {
      position: relative;
      width: 100vw;
      height: 100vh;
      overflow: hidden;
      touch-action: none;
    }
    #map-wrapper {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    #map {
      position: relative;
      transform-origin: center center;
      transform: translate(0px, 0px) rotate(0deg) scale(1);
      transition: transform 0.3s;
      max-width: none;
      height: 100vh;
      width: auto;
      user-select: none;
      -webkit-user-drag: none;
      will-change: transform;
    }
    .controls {
      position: absolute;
      top: 10px;
      right: 10px;
      display: flex;
      flex-direction: column;
      background: rgba(255, 255, 255, 0.2);
      padding: 5px;
      border-radius: 10px;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .controls button {
      font-size: 20px;
      margin: 2px;
      padding: 10px;
      border: none;
      cursor: pointer;
      background: rgba(255, 255, 255, 0.4);
      color: black;
      border-radius: 5px;
      width: 40px;
      height: 40px;
      text-align: center;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      transition: background 0.3s;
    }
    .controls button:hover {
      background: rgba(255, 255, 255, 0.6);
    }
    .search-container {
      position: absolute;
      top: 10px;
      left: 10px;
      display: flex;
      gap: 5px;
      background: rgba(255, 255, 255, 0.2);
      padding: 5px;
      border-radius: 10px;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 3;
    }
    .search-container input {
      background: rgba(255, 255, 255, 0.4);
      border: none;
      padding: 8px 12px;
      border-radius: 5px;
      width: 180px;
      color: black;
      outline: none;
    }
    .search-container button {
      font-size: 16px;
      padding: 8px 12px;
      border: none;
      cursor: pointer;
      background: rgba(255, 255, 255, 0.4);
      color: black;
      border-radius: 5px;
      transition: background 0.3s;
    }
    .search-container button:hover {
      background: rgba(255, 255, 255, 0.6);
    }
    .login-container {
      position: absolute;
      bottom: 10px;
      right: 10px;
      background: rgba(255, 255, 255, 0.2);
      padding: 5px;
      border-radius: 10px;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 2;
    }
    .login-button {
      font-size: 16px;
      padding: 8px 20px;
      border: none;
      cursor: pointer;
      background: rgba(255, 255, 255, 0.4);
      color: black;
      border-radius: 5px;
      transition: background 0.3s;
    }
    .login-button:hover {
      background: rgba(255, 255, 255, 0.6);
    }
  </style>
</head>
<body>
  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search location...">
    <button id="search-button">üîç</button>
  </div> 
  
    <div class="login-container">
      <button class="login-button">Login</button>
    </div>
  
  <div id="map-container">
    <div id="map-wrapper">
      <img id="map" 
           src="https://cdn.glitch.global/5bc9edf4-373c-47f7-9a1c-29acc401cd85/7l.webp?v=1742671563081" 
           alt="Map"
           loading="eager"
           decoding="async"
           width="2560" 
           height="1440">
    </div>
    <div class="controls">
      <button id="zoom-in">+</button>
      <button id="zoom-out">-</button>
      <button id="rotate-map">‚Üª</button>
    </div>

  </div>

  <script>
    const map = document.getElementById('map');
    const mapContainer = document.getElementById('map-container');
    
    let scale = 1;
    let rotation = 0;
    let tx = 0;
    let ty = 0;
    let isDragging = false;
    let startX, startY, initialTx, initialTy;
    let touchStartDistance = null;
    let touchStartScale = scale;

    function updateTransform() {
      map.style.transform = `translate(${tx}px, ${ty}px) rotate(${rotation}deg) scale(${scale})`;
    }

    // Mouse events
    mapContainer.addEventListener('mousedown', (e) => {
      isDragging = true;
      startX = e.clientX;
      startY = e.clientY;
      initialTx = tx;
      initialTy = ty;
      map.style.cursor = 'grabbing';
    });

    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      const dx = e.clientX - startX;
      const dy = e.clientY - startY;
      tx = initialTx + dx / scale;
      ty = initialTy + dy / scale;
      updateTransform();
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
      map.style.cursor = 'grab';
    });

    // Touch events
    mapContainer.addEventListener('touchstart', (e) => {
      if (e.touches.length === 1) {
        const touch = e.touches[0];
        startX = touch.clientX;
        startY = touch.clientY;
        initialTx = tx;
        initialTy = ty;
        isDragging = true;
      } else if (e.touches.length === 2) {
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        touchStartDistance = Math.hypot(
          touch2.clientX - touch1.clientX,
          touch2.clientY - touch1.clientY
        );
        touchStartScale = scale;
      }
    });

    mapContainer.addEventListener('touchmove', (e) => {
      e.preventDefault();
      if (e.touches.length === 1 && isDragging) {
        const touch = e.touches[0];
        const dx = touch.clientX - startX;
        const dy = touch.clientY - startY;
        tx = initialTx + dx / scale;
        ty = initialTy + dy / scale;
        updateTransform();
      } else if (e.touches.length === 2) {
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        const currentDistance = Math.hypot(
          touch2.clientX - touch1.clientX,
          touch2.clientY - touch1.clientY
        );
        if (touchStartDistance) {
          scale = touchStartScale * (currentDistance / touchStartDistance);
          scale = Math.max(0.5, Math.min(scale, 5));
          updateTransform();
        }
      }
    });

    mapContainer.addEventListener('touchend', () => {
      isDragging = false;
      touchStartDistance = null;
    });

    // Wheel zoom
    mapContainer.addEventListener('wheel', (e) => {
      e.preventDefault();
      const delta = e.deltaY > 0 ? 0.9 : 1.1;
      const rect = mapContainer.getBoundingClientRect();
      const wrapperX = rect.width / 2;
      const wrapperY = rect.height / 2;
      const mouseX = e.clientX - rect.left - wrapperX;
      const mouseY = e.clientY - rect.top - wrapperY;

      tx = tx * delta + mouseX * (1 - delta);
      ty = ty * delta + mouseY * (1 - delta);
      scale *= delta;
      scale = Math.max(0.5, Math.min(scale, 5));
      updateTransform();
    });

    // Controls
    document.getElementById('zoom-in').addEventListener('click', () => {
      scale *= 1.1;
      updateTransform();
    });

    document.getElementById('zoom-out').addEventListener('click', () => {
      scale = Math.max(0.5, scale * 0.9);
      updateTransform();
    });

    document.getElementById('rotate-map').addEventListener('click', () => {
      rotation = (rotation + 90) % 360;
      updateTransform();
    });

    // Search functionality
    const locations = [
      { name: "Main Square", x: 1280, y: 720 },
      { name: "North Base", x: 1500, y: 300 },
      { name: "South Dock", x: 800, y: 1200 },
    ];

    function centerOnPoint(x, y) {
      const containerWidth = mapContainer.clientWidth;
      const containerHeight = mapContainer.clientHeight;
      tx = (containerWidth / (2 * scale)) - x;
      ty = (containerHeight / (2 * scale)) - y;
      updateTransform();
    }

    function performSearch() {
      const query = document.getElementById('search-input').value.trim().toLowerCase();
      const location = locations.find(loc => loc.name.toLowerCase() === query);
      if (location) {
        centerOnPoint(location.x, location.y);
      } else {
        alert('Location not found. Try: "Main Square", "North Base", "South Dock"');
      }
    }

    document.getElementById('search-button').addEventListener('click', performSearch);
    document.getElementById('search-input').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') performSearch();
    });

    // Login functionality
    document.querySelector('.login-button').addEventListener('click', () => {
      alert('Login functionality coming soon!');
    });

    // Initial transform
    updateTransform();
  </script>
</body>
</html>